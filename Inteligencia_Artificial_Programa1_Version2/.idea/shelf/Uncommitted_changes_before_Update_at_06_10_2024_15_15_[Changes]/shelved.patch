Index: ../Inteligencia_Artificial_tutorial/Puzzle/src/Ilayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia_Artificial_tutorial/Puzzle/src/Ilayout.java b/../Inteligencia_Artificial_tutorial/Puzzle/src/Ilayout.java
new file mode 100644
--- /dev/null	(date 1728223182938)
+++ b/../Inteligencia_Artificial_tutorial/Puzzle/src/Ilayout.java	(date 1728223182938)
@@ -0,0 +1,16 @@
+import java.util.List;
+
+public interface Ilayout {
+    /**
+     @return the children of the receiver.
+     */
+    List<Ilayout> children();
+    /**
+     @return true if the receiver equals the argument l; return false otherwise.
+     */
+    boolean isGoal(Ilayout l);
+    /**
+     @return the cost from the receiver to a successor
+     */
+    double getK();
+}
\ No newline at end of file
Index: ../Inteligencia_Artificial_tutorial/Puzzle/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia_Artificial_tutorial/Puzzle/.idea/misc.xml b/../Inteligencia_Artificial_tutorial/Puzzle/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1728223182932)
+++ b/../Inteligencia_Artificial_tutorial/Puzzle/.idea/misc.xml	(date 1728223182932)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: ../Inteligencia_Artificial_tutorial/Puzzle/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia_Artificial_tutorial/Puzzle/.idea/.gitignore b/../Inteligencia_Artificial_tutorial/Puzzle/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1728223182932)
+++ b/../Inteligencia_Artificial_tutorial/Puzzle/.idea/.gitignore	(date 1728223182932)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: ../Inteligencia_Artificial_tutorial/Puzzle/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia_Artificial_tutorial/Puzzle/.idea/modules.xml b/../Inteligencia_Artificial_tutorial/Puzzle/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1728223182932)
+++ b/../Inteligencia_Artificial_tutorial/Puzzle/.idea/modules.xml	(date 1728223182932)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Puzzle.iml" filepath="$PROJECT_DIR$/Puzzle.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/Inteligencia-Artificial_Programa_1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/Inteligencia-Artificial_Programa_1.iml b/../Inteligencia-Artificial_Programa_1/Inteligencia-Artificial_Programa_1.iml
new file mode 100644
--- /dev/null	(date 1728223182916)
+++ b/../Inteligencia-Artificial_Programa_1/Inteligencia-Artificial_Programa_1.iml	(date 1728223182916)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/Puzzle/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit5.8.1">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/.idea/modules.xml b/../Inteligencia-Artificial_Programa_1/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1728223182915)
+++ b/../Inteligencia-Artificial_Programa_1/.idea/modules.xml	(date 1728223182915)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Inteligencia-Artificial_Programa_1.iml" filepath="$PROJECT_DIR$/Inteligencia-Artificial_Programa_1.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/.idea/misc.xml b/../Inteligencia-Artificial_Programa_1/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1728223182913)
+++ b/../Inteligencia-Artificial_Programa_1/.idea/misc.xml	(date 1728223182913)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22_PREVIEW" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/.idea/vcs.xml b/../Inteligencia-Artificial_Programa_1/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1728223182916)
+++ b/../Inteligencia-Artificial_Programa_1/.idea/vcs.xml	(date 1728223182916)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/.idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/.idea/uiDesigner.xml b/../Inteligencia-Artificial_Programa_1/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1728223182916)
+++ b/../Inteligencia-Artificial_Programa_1/.idea/uiDesigner.xml	(date 1728223182916)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/.idea/libraries/src.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/.idea/libraries/src.xml b/../Inteligencia-Artificial_Programa_1/.idea/libraries/src.xml
new file mode 100644
--- /dev/null	(date 1728223182913)
+++ b/../Inteligencia-Artificial_Programa_1/.idea/libraries/src.xml	(date 1728223182913)
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+  <library name="src">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/Puzzle/src.zip!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/Puzzle/src/Container.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/Puzzle/src/Container.java b/../Inteligencia-Artificial_Programa_1/Puzzle/src/Container.java
new file mode 100644
--- /dev/null	(date 1728223182918)
+++ b/../Inteligencia-Artificial_Programa_1/Puzzle/src/Container.java	(date 1728223182918)
@@ -0,0 +1,64 @@
+import java.util.Objects;
+
+/**
+ * Classe container para armazenar o identificador e o custo de movimentação
+ */
+public class Container {
+    /**
+     * Estrutura da classe Container
+     */
+    private char id;
+    private int containerCost;
+
+    /**
+     * Construtor de inicialização de valores de estrutura
+     */
+    public Container(char id, int cost) {
+        this.id = id;
+        this.containerCost = cost;
+    }
+
+    /**
+     * Construtor de cópia
+     */
+    public Container(Container c) {
+        this.id = c.getId();
+        this.containerCost = c.getcost();
+    }
+
+    public int getcost() {
+        return this.containerCost;
+    }
+
+    public char getId() {
+        return this.id;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(getId(),getcost());
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || this.getClass() != obj.getClass()) return false;
+
+        Container other = (Container) obj;
+        return this.getId() == other.getId();
+    }
+
+    @Override
+    public Container clone()
+    {
+        return new Container(this);
+    }
+
+    /**
+     * Retorna a representação textual da classe interna container
+     */
+    @Override
+    public String toString() {
+        return String.valueOf(getId());
+    }
+}
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/Puzzle/src/BestFirst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/Puzzle/src/BestFirst.java b/../Inteligencia-Artificial_Programa_1/Puzzle/src/BestFirst.java
new file mode 100644
--- /dev/null	(date 1728223182918)
+++ b/../Inteligencia-Artificial_Programa_1/Puzzle/src/BestFirst.java	(date 1728223182918)
@@ -0,0 +1,115 @@
+import java.util.*;
+
+public class BestFirst {
+    protected Queue<State> abertos;
+    private Set<Ilayout> fechados;
+    private State actual;
+    private Ilayout objective;
+
+    public static class State {
+        private Ilayout layout;
+        private State father;
+        private double g;
+
+        public State() {
+            this.layout = null;
+            this.father = null;
+            this.g = 0.0;
+        }
+
+        public State(Ilayout l, State n) {
+            this.layout = l;
+            this.father = n;
+            if (this.father != null)
+                this.g = this.father.getG() + l.getK();
+            else
+                this.g = 0.0;
+        }
+
+        public double getG() {
+            return this.g;
+        }
+
+        public Ilayout getLayout() {
+            return this.layout;
+        }
+
+        public State getFather() {
+            return this.father;
+        }
+
+        @Override
+        public int hashCode() {
+            return layout.hashCode();
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            if (this == obj) return true;
+            if (obj == null || getClass() != obj.getClass()) return false;
+            State other = (State) obj;
+            return layout.equals(other.layout);
+        }
+
+        @Override
+        public String toString() {
+            return this.layout.toString();
+        }
+    }
+
+    final private List<State> sucessores(State n) {
+        List<State> sucs = new ArrayList<>();
+        List<Ilayout> children = n.getLayout().children();
+        for (Ilayout e : children) {
+            if ((n.getFather() == null || !e.equals(n.getFather().getLayout())) && !fechados.contains(e)) {
+                State nn = new State(e, n);
+                sucs.add(nn);
+            }
+        }
+        return sucs;
+    }
+
+    final public Iterator<State> solve(Ilayout initial, Ilayout goal) {
+        this.objective = goal;
+        State initialConfiguration = new State(initial, null);
+        this.abertos = new PriorityQueue<>(10, (s1, s2) -> Double.compare(s1.getG(), s2.getG()));
+        this.fechados = new HashSet<>();
+        Set<Ilayout> abertosSet = new HashSet<>();
+
+        this.abertos.add(initialConfiguration);
+        abertosSet.add(initialConfiguration.getLayout());
+
+        while (!this.abertos.isEmpty()) {
+            this.actual = this.abertos.poll();
+
+            if (this.actual.getLayout().isGoal(this.objective)) {
+                return reconstructPath(this.actual);
+            }
+
+            List<State> sucs = sucessores(this.actual);
+            this.fechados.add(this.actual.getLayout());
+
+            for (State sucessor : sucs) {
+                if (!fechados.contains(sucessor.getLayout()) && !abertosSet.contains(sucessor.getLayout())) {
+                    if (sucessor.getLayout().isGoal(this.objective)) {
+                        return reconstructPath(sucessor);
+                    }
+                    this.abertos.add(sucessor);
+                    abertosSet.add(sucessor.getLayout());
+                }
+            }
+        }
+        return null;
+    }
+
+    private Iterator<State> reconstructPath(State goalState) {
+        List<State> path = new ArrayList<>();
+        State current = goalState;
+        while (current != null) {
+            path.add(current);
+            current = current.getFather();
+        }
+        Collections.reverse(path);
+        return path.iterator();
+    }
+}
Index: ../Inteligencia-Artificial_Programa_1/Puzzle/src/ContainersConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/Puzzle/src/ContainersConfiguration.java b/../Inteligencia-Artificial_Programa_1/Puzzle/src/ContainersConfiguration.java
new file mode 100644
--- /dev/null	(date 1728223182918)
+++ b/../Inteligencia-Artificial_Programa_1/Puzzle/src/ContainersConfiguration.java	(date 1728223182918)
@@ -0,0 +1,234 @@
+import java.util.*;
+
+public class ContainersConfiguration implements Ilayout, Cloneable {
+    /**
+     * Estrutura estática da classe ContainerOrganizer
+     */
+    public static final Comparator<Stack<Container>> compareChars = (s1,s2) -> String.valueOf(
+            s1.firstElement().getId()).compareTo(String.valueOf(s2.firstElement().getId()));
+
+    /**
+     * Estrutura da classe ContainerOrganizer
+     */
+    private List<Stack<Container>> stacks;
+    private double cost;
+
+
+    /**
+     * Construtor por omissão
+     */
+    public ContainersConfiguration() {
+        stacks = null;
+        this.cost = 0;
+    }
+
+    /**
+     * Construtor de inicialização
+     */
+    public ContainersConfiguration(String config, boolean isInitialState) {
+        stacks = new ArrayList<>();
+        parseInput(config, isInitialState);
+        this.cost = 0;
+    }
+
+    /**
+     * Construtor de cópia
+     */
+    public ContainersConfiguration(ContainersConfiguration other) {
+        stacks = new ArrayList<>();
+
+        for (Stack<Container> stack : other.stacks) {
+            Stack<Container> newStack = new Stack<>();
+
+            for (Container container : stack) {
+                newStack.push(new Container(container));
+            }
+
+            stacks.add(newStack);
+        }
+    }
+    private void parseInput(String config, boolean isInitialState) {
+        String[] stacksConfig = config.split(" ");
+        for (String stackStr : stacksConfig) {
+            Stack<Container> stack = new Stack<>();
+            for (int i = 0; i < stackStr.length(); i++) {
+                char containerId = stackStr.charAt(i);
+
+                int movecost = (isInitialState && i + 1 < stackStr.length() && Character.isDigit(stackStr.charAt(i + 1)))
+                        ? Character.getNumericValue(stackStr.charAt(i + 1))
+                        : 0;
+
+                stack.push(new Container(containerId, movecost));
+
+                if (movecost > 0) {
+                    i++;
+                }
+            }
+            stacks.add(stack);
+        }
+    }
+    public List<Stack<Container>> getStacks()
+    {
+        return stacks;
+    }
+
+    @SuppressWarnings("unchecked")
+    public void setStacks(List<Stack<Container>> ss)
+    {
+        stacks = new ArrayList<>();
+        for(Stack<Container> s: ss)
+        {
+            stacks.add((Stack<Container>)s.clone());
+        }
+    }
+
+    public void setCost(double cost)
+    {
+        this.cost = cost;
+    }
+
+    private void removeEmptyStacks() {
+        stacks.removeIf(Stack::isEmpty);
+    }
+
+    @Override
+    public int hashCode() {
+        return Arrays.hashCode(this.getSortedStacks().toArray());
+    }
+
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public ContainersConfiguration clone() {
+        List<Stack<Container>> stacksLocal = getStacks();
+        ContainersConfiguration copy = new ContainersConfiguration();
+        copy.setStacks(new ArrayList<>(stacksLocal.size()));
+        for (Stack<Container> stack : stacksLocal) {
+            copy.getStacks().add((Stack<Container>) stack.clone());
+        }
+        copy.setCost(getK());
+        return copy;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+
+        List<Stack<Container>> sortedStacks = getSortedStacks();
+
+        for (Stack<Container> stack : sortedStacks) {
+            sb.append("[");
+            for (int i = 0; i < stack.size(); i++) {
+                sb.append(stack.get(i).toString());
+                if (i < stack.size() - 1) {
+                    sb.append(", ");
+                }
+            }
+            sb.append("]\n");
+        }
+        return sb.toString();
+    }
+
+    @Override
+    public List<Ilayout> children() {
+        List<Ilayout> children = new ArrayList<>();
+        List<Stack<Container>> stacksLocal = getStacks();
+        for (int i = 0; i < stacksLocal.size(); i++) {
+            if (!getStacks().get(i).isEmpty()) {
+                ContainersConfiguration newConfiguration;
+
+                newConfiguration = this.clone();
+                newConfiguration.moveToGround(i);
+                newConfiguration.removeEmptyStacks();
+                if (!newConfiguration.equals(this)) {
+                    children.add(newConfiguration);
+                }
+
+                for (int j = 0; j < stacksLocal.size(); j++) {
+                    if (i != j) {
+                        newConfiguration = this.clone();
+                        newConfiguration.moveToStack(i, j);
+                        newConfiguration.removeEmptyStacks();
+                        if (!newConfiguration.equals(this)) {
+                            children.add(newConfiguration);
+                        }
+                    }
+                }
+            }
+        }
+
+        return children;
+    }
+
+    @Override
+    public boolean isGoal(Ilayout l) {
+        return l.equals(this);
+    }
+
+    @Override
+    public double getK() {
+        return this.cost;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ContainersConfiguration other = (ContainersConfiguration) o;
+
+        List<Stack<Container>> sortedThisStacks = this.getSortedStacks();
+        List<Stack<Container>> sortedOtherStacks = other.getSortedStacks();
+
+        if (sortedThisStacks.size() != sortedOtherStacks.size()) return false;
+
+        for (int i = 0; i < sortedThisStacks.size(); i++) {
+            Stack<Container> thisStack = sortedThisStacks.get(i);
+            Stack<Container> otherStack = sortedOtherStacks.get(i);
+
+            if(thisStack.size() != otherStack.size()) return false;
+
+            for (int j = 0; j < thisStack.size(); j++) {
+                Container thisContainer = thisStack.get(j);
+                Container goalContainer = otherStack.get(j);
+
+                if (!thisContainer.equals(goalContainer)) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+    private List<Stack<Container>> getSortedStacks() {
+        List<Stack<Container>> sortedStacks = new ArrayList<>(getStacks());
+        sortedStacks.sort(ContainersConfiguration.compareChars);
+        return sortedStacks;
+    }
+
+    private void moveToGround(int fromStack) {
+        List<Stack<Container>> stacksLocal = getStacks();
+        if (fromStack >= stacksLocal.size()) return;
+
+
+        Container container = stacksLocal.get(fromStack).pop();
+
+        Stack<Container> newStack = new Stack<>();
+        newStack.push(container);
+        stacksLocal.add(newStack);
+
+        this.setCost(container.getcost());
+    }
+
+    private void moveToStack(int fromStack, int toStack) {
+        List<Stack<Container>> stacksLocal = getStacks();
+        if (fromStack >= stacksLocal.size() || toStack >= stacksLocal.size()) {
+            return;
+        }
+
+        Container container = stacksLocal.get(fromStack).pop();
+        stacksLocal.get(toStack).push(container);
+
+        this.setCost(container.getcost());
+    }
+}
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/Puzzle/src/PuzzleUnitTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/Puzzle/src/PuzzleUnitTests.java b/../Inteligencia-Artificial_Programa_1/Puzzle/src/PuzzleUnitTests.java
new file mode 100644
--- /dev/null	(date 1728223182923)
+++ b/../Inteligencia-Artificial_Programa_1/Puzzle/src/PuzzleUnitTests.java	(date 1728223182923)
@@ -0,0 +1,293 @@
+//import org.junit.Test;
+//import java.io.PrintWriter;
+//import java.io.StringWriter;
+//import java.util.Iterator;
+//import java.util.List;
+//import static org.junit.Assert.*;
+//public class PuzzleUnitTests {
+//    /**
+//     * Testa o construtor da classe ContainerOrganizer ao passar uma string representando a
+//     * configuração do tabuleiro.
+//     * Verifica se a saída de toString() é gerada corretamente.
+//     */
+//    @Test
+//    public void testConstructor() {
+//        ContainerOrganizer b = new ContainerOrganizer("023145678");
+//        StringWriter writer = new StringWriter();
+//        PrintWriter pw = new PrintWriter ( writer ) ;
+//        pw.println(" 23");
+//        pw.println("145");
+//        pw.println("678");
+//        assertEquals(b.toString(), writer.toString());
+//        pw.close();
+//    }
+//
+//    /**
+//     * Testa outra configuração
+//     * do tabuleiro no construtor e verifica se a representação textual está correta.
+//     */
+//    @Test
+//    public void testConstructor2() {
+//        ContainerOrganizer b = new ContainerOrganizer("123485670");
+//        StringWriter writer = new StringWriter();
+//        PrintWriter pw = new PrintWriter (writer) ;
+//        pw.println("123");
+//        pw.println("485");
+//        pw.println("67 ");
+//        assertEquals(b.toString(), writer.toString());
+//        pw.close();
+//    }
+//
+//    /**
+//     * Verifica se o algoritmo BestFirst.solve() consegue encontrar uma solução do estado inicial para o estado objetivo.
+//     * Testa se a solução encontrada corresponde ao estado objetivo.
+//     */
+//    @Test
+//    public void testSolve() {
+//        Ilayout initial = new ContainerOrganizer("023145678");
+//        Ilayout goal = new ContainerOrganizer("123456780"); // The solved configuration
+//
+//        BestFirst bfs = new BestFirst();
+//
+//        Iterator<BestFirst.State> solution = bfs.solve(initial, goal);
+//
+//        assertNotNull("Solution should not be null", solution);
+//
+//        BestFirst.State lastState = null;
+//        while (solution.hasNext()) {
+//            lastState = solution.next();
+//        }
+//        assertNotNull(lastState);
+//        assertEquals(goal, lastState.getLayout());
+//    }
+//
+//    /**
+//     * Verifica se dois estados com a mesma configuração de tabuleiro são considerados iguais
+//     */
+//    @Test
+//    public void testStateEquality() {
+//        Ilayout ContainerOrganizer1 = new ContainerOrganizer("123456780");
+//        Ilayout ContainerOrganizer2 = new ContainerOrganizer("123456780");
+//
+//        BestFirst.State state1 = new BestFirst.State(ContainerOrganizer1, null);
+//        BestFirst.State state2 = new BestFirst.State(ContainerOrganizer2, null);
+//
+//        assertEquals("States with the same layout should be equal", state1, state2);
+//    }
+//
+//    /**
+//     * Verifica se dois estados com configurações de tabuleiro diferentes não são considerados iguais.
+//     */
+//    @Test
+//    public void testStateInequality() {
+//        Ilayout ContainerOrganizer1 = new ContainerOrganizer("123456780");
+//        Ilayout ContainerOrganizer2 = new ContainerOrganizer("876543210");
+//
+//        BestFirst.State state1 = new BestFirst.State(ContainerOrganizer1, null);
+//        BestFirst.State state2 = new BestFirst.State(ContainerOrganizer2, null);
+//
+//        assertNotEquals("States with different layouts should not be equal", state1, state2);
+//    }
+//
+//    /**
+//     * Testa o método privado sucessores da classe BestFirst,
+//     * que gera os sucessores (estados filhos) de um dado estado.
+//     */
+//    @Test
+//    public void testSuccessors() {
+//        Ilayout ContainerOrganizer = new ContainerOrganizer("123456780");
+//        BestFirst.State state = new BestFirst.State(ContainerOrganizer, null);
+//
+//        BestFirst bfs = new BestFirst();
+//
+//        try {
+//            java.lang.reflect.Method method = BestFirst.class.getDeclaredMethod("sucessores", BestFirst.State.class);
+//            method.setAccessible(true);
+//            @SuppressWarnings("unchecked")
+//            List<BestFirst.State> successors = (List<BestFirst.State>) method.invoke(bfs, state);
+//
+//            assertNotNull("Successors should not be null", successors);
+//
+//            assertFalse("Successors list should not be empty", successors.isEmpty());
+//        } catch (Exception e) {
+//            fail("Exception occurred: " + e.getMessage());
+//        }
+//    }
+//
+//    /**
+//     * Testa a reconstrução do caminho da solução utilizando o método reconstructPath,
+//     * que retorna o caminho do estado inicial ao objetivo.
+//     */
+//    @Test
+//    public void testReconstructPath() {
+//
+//        Ilayout ContainerOrganizer1 = new ContainerOrganizer("123456780");
+//        Ilayout ContainerOrganizer2 = new ContainerOrganizer("123456078");
+//        Ilayout ContainerOrganizer3 = new ContainerOrganizer("123456708");
+//
+//        BestFirst.State state1 = new BestFirst.State(ContainerOrganizer1, null);
+//        BestFirst.State state2 = new BestFirst.State(ContainerOrganizer2, state1);
+//        BestFirst.State state3 = new BestFirst.State(ContainerOrganizer3, state2);
+//
+//        BestFirst bfs = new BestFirst();
+//
+//        try {
+//            java.lang.reflect.Method method = BestFirst.class.getDeclaredMethod("reconstructPath", BestFirst.State.class);
+//            method.setAccessible(true);
+//            @SuppressWarnings("unchecked")
+//            Iterator<BestFirst.State> path = (Iterator<BestFirst.State>) method.invoke(bfs, state3);
+//
+//            assertTrue("Path should contain states", path.hasNext());
+//            assertEquals("First state should be the initial state", state1, path.next());
+//            assertEquals("Second state should be state2", state2, path.next());
+//            assertEquals("Third state should be the goal state (state3)", state3, path.next());
+//        } catch (Exception e) {
+//            fail("Exception occurred: " + e.getMessage());
+//        }
+//    }
+//
+//    /**
+//     * Testa o construtor padrão de ContainerOrganizer e verifica se a representação textual vazia está correta.
+//     */
+//    @Test
+//    public void testDefaultConstructor() {
+//        ContainerOrganizer b = new ContainerOrganizer();
+//        String expected = "   \n   \n   \n";
+//        assertEquals(expected, b.toString());
+//    }
+//
+//    /**
+//     * Testa o construtor de ContainerOrganizer com uma string válida e verifica se a representação textual está correta.
+//     */
+//    @Test
+//    public void testStringConstructorValid() {
+//        ContainerOrganizer b = new ContainerOrganizer("123456780");
+//        String expected = "123\n456\n78 \n";
+//        assertEquals(expected, b.toString());
+//    }
+//
+//    /**
+//     * Testa se o construtor lança uma exceção ao receber uma string de comprimento inválido.
+//     */
+//    @Test(expected = IllegalStateException.class)
+//    public void testStringConstructorInvalidLength() {
+//        new ContainerOrganizer("12345678");
+//    }
+//
+//    /**
+//     * Testa o construtor de cópia para garantir que os objetos ContainerOrganizer copiados são iguais,
+//     * mas não são a mesma instância.
+//     */
+//    @Test
+//    public void testCopyConstructor() {
+//        ContainerOrganizer b1 = new ContainerOrganizer("123456780");
+//        ContainerOrganizer b2 = new ContainerOrganizer(b1);
+//        assertEquals(b1, b2);
+//        assertNotSame(b1, b2);
+//    }
+//
+//    /**
+//     * Verifica se a função toString() de ContainerOrganizer retorna a representação correta do tabuleiro.
+//     */
+//    @Test
+//    public void testToString() {
+//        ContainerOrganizer b = new ContainerOrganizer("123456780");
+//        String expected = "123\n456\n78 \n";
+//        assertEquals(expected, b.toString());
+//    }
+//
+//    /**
+//     * Testa se dois objetos ContainerOrganizer com a mesma configuração são considerados iguais.
+//     */
+//    @Test
+//    public void testEqualsTrue() {
+//        ContainerOrganizer b1 = new ContainerOrganizer("123456780");
+//        ContainerOrganizer b2 = new ContainerOrganizer("123456780");
+//        assertEquals(b1, b2);
+//    }
+//
+//    /**
+//     * Testa se dois objetos ContainerOrganizer com configurações diferentes são considerados diferentes.
+//     */
+//    @Test
+//    public void testEqualsFalse() {
+//        ContainerOrganizer b1 = new ContainerOrganizer("123456780");
+//        ContainerOrganizer b2 = new ContainerOrganizer("876543210");
+//        assertNotEquals(b1, b2);
+//    }
+//
+//    /**
+//     * Verifica se o método clone() cria uma cópia correta do objeto ContainerOrganizer.
+//     */
+//    @Test
+//    public void testClone() {
+//        ContainerOrganizer b1 = new ContainerOrganizer("123456780");
+//        ContainerOrganizer b2 = b1.clone();
+//        assertEquals(b1, b2);
+//        assertNotSame(b1, b2);
+//    }
+//
+//    /**
+//     * Testa se dois objetos ContainerOrganizer diferentes têm diferentes códigos hash.
+//     */
+//    @Test
+//    public void testHashCode() {
+//        ContainerOrganizer b1 = new ContainerOrganizer("123456780");
+//        ContainerOrganizer b2 = new ContainerOrganizer("123450786");
+//        assertNotEquals(b1.hashCode(), b2.hashCode());
+//    }
+//
+//    /**
+//     * Testa o método children() de ContainerOrganizer para garantir que ele gera os estados filhos corretamente.
+//     */
+//    @Test
+//    public void testChildren() {
+//        ContainerOrganizer b = new ContainerOrganizer("123405678");
+//        List<Ilayout> children = b.children();
+//
+//
+//        assertEquals(4, children.size());
+//
+//
+//        ContainerOrganizer firstChild = (ContainerOrganizer) children.getFirst();
+//        assertEquals("1 3\n425\n678\n", firstChild.toString());
+//
+//        ContainerOrganizer secondChild = (ContainerOrganizer) children.get(1);
+//        assertEquals("123\n475\n6 8\n", secondChild.toString());
+//
+//        ContainerOrganizer thirdChild = (ContainerOrganizer) children.get(2);
+//        assertEquals("123\n 45\n678\n", thirdChild.toString());
+//
+//        ContainerOrganizer fourthChild = (ContainerOrganizer) children.get(3);
+//        assertEquals("123\n45 \n678\n", fourthChild.toString());
+//    }
+//
+//    /**
+//     * Testa se um tabuleiro é corretamente identificado como o estado objetivo.
+//     */
+//    @Test
+//    public void testIsGoalTrue() {
+//        ContainerOrganizer b = new ContainerOrganizer("123456780");
+//        ContainerOrganizer goal = new ContainerOrganizer("123456780");
+//        assertTrue(b.isGoal(goal));
+//    }
+//
+//    /**
+//     * Testa se um tabuleiro é corretamente identificado como não sendo o estado objetivo.
+//     */
+//    @Test
+//    public void testIsGoalFalse() {
+//        ContainerOrganizer b = new ContainerOrganizer("123456780");
+//        ContainerOrganizer goal = new ContainerOrganizer("876543210");
+//        assertFalse(b.isGoal(goal));
+//    }
+//
+//    /**
+//     * Testa o método getK() da classe ContainerOrganizer, verificando se o valor retornado está correto.
+//     */
+//    @Test
+//    public void testGetK() {
+//        ContainerOrganizer b = new ContainerOrganizer("123456780");
+//        assertEquals(1.0, b.getK(), 0.001);
+//    }
+//}
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/Puzzle/src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/Puzzle/src/Main.java b/../Inteligencia-Artificial_Programa_1/Puzzle/src/Main.java
new file mode 100644
--- /dev/null	(date 1728223182923)
+++ b/../Inteligencia-Artificial_Programa_1/Puzzle/src/Main.java	(date 1728223182923)
@@ -0,0 +1,26 @@
+import java.util.Iterator;
+import java.util.Scanner;
+
+import static java.lang.System.out;
+
+public class Main {
+    public static void main (String [] args) throws Exception {
+        Scanner sc = new Scanner(System.in);
+        BestFirst s = new BestFirst();
+        String firstConfiguration = sc.nextLine();
+        String secondConfiguration = sc.nextLine();
+        //out.println(firstConfiguration + " " + secondConfiguration);
+        ContainersConfiguration containerConfiguration1 = new ContainersConfiguration(firstConfiguration,true);
+        ContainersConfiguration containersConfiguration2 = new ContainersConfiguration(secondConfiguration,false);
+        Iterator<BestFirst.State> it = s.solve(containerConfiguration1, containersConfiguration2);
+        if (it==null) out.println("no solution found");
+        else {
+            while(it.hasNext()) {
+                BestFirst.State i = it.next();
+                out.println(i);
+                if (!it.hasNext()) out.println((int)i.getG());
+            }
+        }
+        sc.close();
+    }
+}
\ No newline at end of file
Index: ../Inteligencia-Artificial_Programa_1/Puzzle/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia-Artificial_Programa_1/Puzzle/.idea/.gitignore b/../Inteligencia-Artificial_Programa_1/Puzzle/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1728223182918)
+++ b/../Inteligencia-Artificial_Programa_1/Puzzle/.idea/.gitignore	(date 1728223182918)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: ../README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># AI\r\nMechanism of making machines complete tasks of which intelligence is a must.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../README.md b/../README.md
--- a/../README.md	(revision b839b6c0b08a5254af686403cdb21e1df5ed02db)
+++ b/../README.md	(date 1728223182946)
@@ -1,2 +1,8 @@
 # AI
 Mechanism of making machines complete tasks of which intelligence is a must.
+
+1-Tutorial(complete and succefully accepted by Mooshak)
+
+2-Program1(complete and succefully accepted by Mooshak)
+
+
Index: ../Inteligencia_Artificial_tutorial/Inteligencia-Artificial.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia_Artificial_tutorial/Inteligencia-Artificial.iml b/../Inteligencia_Artificial_tutorial/Inteligencia-Artificial.iml
new file mode 100644
--- /dev/null	(date 1728223182932)
+++ b/../Inteligencia_Artificial_tutorial/Inteligencia-Artificial.iml	(date 1728223182932)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/Puzzle/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: ../Inteligencia_Artificial_tutorial/Puzzle/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia_Artificial_tutorial/Puzzle/.gitignore b/../Inteligencia_Artificial_tutorial/Puzzle/.gitignore
new file mode 100644
--- /dev/null	(date 1728223182932)
+++ b/../Inteligencia_Artificial_tutorial/Puzzle/.gitignore	(date 1728223182932)
@@ -0,0 +1,29 @@
+### IntelliJ IDEA ###
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: ../Inteligencia_Artificial_tutorial/Puzzle/Puzzle.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Inteligencia_Artificial_tutorial/Puzzle/Puzzle.iml b/../Inteligencia_Artificial_tutorial/Puzzle/Puzzle.iml
new file mode 100644
--- /dev/null	(date 1728223182932)
+++ b/../Inteligencia_Artificial_tutorial/Puzzle/Puzzle.iml	(date 1728223182932)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
diff --git a/../Puzzle/src/Board.java b/../Inteligencia_Artificial_tutorial/Puzzle/src/Board.java
rename from ../Puzzle/src/Board.java
rename to ../Inteligencia_Artificial_tutorial/Puzzle/src/Board.java
diff --git a/../Puzzle/src/PuzzleUnitTests.java b/../Inteligencia_Artificial_tutorial/Puzzle/src/PuzzleUnitTests.java
rename from ../Puzzle/src/PuzzleUnitTests.java
rename to ../Inteligencia_Artificial_tutorial/Puzzle/src/PuzzleUnitTests.java
diff --git a/../Puzzle/src/Main.java b/../Inteligencia_Artificial_tutorial/Puzzle/src/Main.java
rename from ../Puzzle/src/Main.java
rename to ../Inteligencia_Artificial_tutorial/Puzzle/src/Main.java
diff --git a/../Inteligencia-Artificial.iml b/../Inteligencia-Artificial_Programa_1/Inteligencia-Artificial.iml
rename from ../Inteligencia-Artificial.iml
rename to ../Inteligencia-Artificial_Programa_1/Inteligencia-Artificial.iml
diff --git a/../Puzzle/.idea/.gitignore b/../Inteligencia-Artificial_Programa_1/.idea/.gitignore
rename from ../Puzzle/.idea/.gitignore
rename to ../Inteligencia-Artificial_Programa_1/.idea/.gitignore
diff --git a/../Puzzle/.gitignore b/../Inteligencia-Artificial_Programa_1/Puzzle/.gitignore
rename from ../Puzzle/.gitignore
rename to ../Inteligencia-Artificial_Programa_1/Puzzle/.gitignore
diff --git a/../Puzzle/Puzzle.iml b/../Inteligencia-Artificial_Programa_1/Puzzle/Puzzle.iml
rename from ../Puzzle/Puzzle.iml
rename to ../Inteligencia-Artificial_Programa_1/Puzzle/Puzzle.iml
diff --git a/../Puzzle/src/Ilayout.java b/../Inteligencia-Artificial_Programa_1/Puzzle/src/Ilayout.java
rename from ../Puzzle/src/Ilayout.java
rename to ../Inteligencia-Artificial_Programa_1/Puzzle/src/Ilayout.java
diff --git a/../Puzzle/.idea/misc.xml b/../Inteligencia-Artificial_Programa_1/Puzzle/.idea/misc.xml
rename from ../Puzzle/.idea/misc.xml
rename to ../Inteligencia-Artificial_Programa_1/Puzzle/.idea/misc.xml
diff --git a/../Puzzle/.idea/modules.xml b/../Inteligencia-Artificial_Programa_1/Puzzle/.idea/modules.xml
rename from ../Puzzle/.idea/modules.xml
rename to ../Inteligencia-Artificial_Programa_1/Puzzle/.idea/modules.xml
diff --git a/../Puzzle/src/BestFirst.java b/../Inteligencia_Artificial_tutorial/Puzzle/src/BestFirst.java
rename from ../Puzzle/src/BestFirst.java
rename to ../Inteligencia_Artificial_tutorial/Puzzle/src/BestFirst.java
